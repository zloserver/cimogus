name: "Deploy workflow"

on:
  workflow_dispatch:
  push:
    branches:
      - "**"
    tags:
      - "*"

env:
  QT_MIRROR: https://mirrors.ocf.berkeley.edu/qt/ # https://download.qt.io/static/mirrorlist/

jobs:
  # Build-Linux-Ubuntu:
  #   runs-on: ubuntu-20.04

  #   env:
  #     QT_VERSION: 6.6.2
  #     QIF_VERSION: 4.7

  #   steps:
  #     - name: "Install Qt"
  #       uses: jurplel/install-qt-action@v3
  #       with:
  #         version: ${{ env.QT_VERSION }}
  #         host: "linux"
  #         target: "desktop"
  #         arch: "gcc_64"
  #         modules: "qtremoteobjects qt5compat qtshadertools"
  #         dir: ${{ runner.temp }}
  #         setup-python: "true"
  #         tools: "tools_ifw"
  #         set-env: "true"
  #         extra: "--external 7z --base ${{ env.QT_MIRROR }}"

  #     - name: "Get sources"
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: "true"
  #         fetch-depth: 10

  #     - name: "Setup ccache"
  #       uses: hendrikmuhs/ccache-action@v1.2

  #     - name: "Build project"
  #       run: |
  #         sudo apt-get install libxkbcommon-x11-0
  #         export QT_BIN_DIR=${{ runner.temp }}/Qt/${{ env.QT_VERSION }}/gcc_64/bin
  #         export QIF_BIN_DIR=${{ runner.temp }}/Qt/Tools/QtInstallerFramework/${{ env.QIF_VERSION }}/bin
  #         bash deploy/build_linux.sh

  #     - name: "Pack installer"
  #       run: cd deploy && tar -cf AmneziaVPN_Linux_Installer.tar AmneziaVPN_Linux_Installer.bin

  #     - name: "Upload installer artifact"
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: AmneziaVPN_Linux_installer.tar
  #         path: deploy/AmneziaVPN_Linux_Installer.tar
  #         retention-days: 7

  #     - name: "Upload unpacked artifact"
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: AmneziaVPN_Linux_unpacked
  #         path: deploy/AppDir
  #         retention-days: 7

  #     - name: "Upload translations artifact"
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: AmneziaVPN_translations
  #         path: client/translations
  #         retention-days: 7

  # ------------------------------------------------------

  Build-Windows:
    runs-on: windows-latest

    env:
      QT_VERSION: 6.8.0
      QIF_VERSION: 4.7
      BUILD_ARCH: 64

    steps:
      - name: Get token from Github App
        uses: actions/create-github-app-token@v1
        id: app_token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PEM }}
          owner: ${{ github.repository_owner }}

      - name: "Get sources"
        uses: actions/checkout@v4
        with:
          submodules: "true"
          fetch-depth: 10
          token: ${{ steps.app_token.outputs.token }}

      - name: "Setup ccache"
        uses: hendrikmuhs/ccache-action@v1.2

      - name: "Install Qt"
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: "windows"
          target: "desktop"
          arch: "win64_msvc2022_64"
          modules: "qtremoteobjects qt5compat qtshadertools"
          dir: ${{ runner.temp }}
          setup-python: "true"
          tools: "tools_ifw"
          set-env: "true"
          extra: "--external 7z --base ${{ env.QT_MIRROR }}"

      - name: "Setup mvsc"
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: "x64"

      - name: "Build project"
        shell: cmd
        run: |
          set BUILD_ARCH=${{ env.BUILD_ARCH }}
          set QT_BIN_DIR="${{ runner.temp }}\\Qt\\${{ env.QT_VERSION }}\\msvc2022_64\\bin"
          set QIF_BIN_DIR="${{ runner.temp }}\\Qt\\Tools\\QtInstallerFramework\\${{ env.QIF_VERSION }}\\bin"
          call deploy\\build_windows.bat

      - name: "Upload installer artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ZloVPN_Windows_Installer
          path: ZloVPN_x${{ env.BUILD_ARCH }}.exe
          retention-days: 7

      - name: "Upload unpacked artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ZloVPN_Windows_Unpacked
          path: deploy\\build_${{ env.BUILD_ARCH }}\\client\\Release
          retention-days: 7

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ZloVpn_x${{ env.BUILD_ARCH }}.exe
          fail_on_unmatched_files: true

  # ------------------------------------------------------

  Build-iOS:
    runs-on: macos-14

    env:
      QT_VERSION: 6.6.2
      CC: cc
      CXX: c++

    steps:
      - name: "Setup xcode"
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16"

      - name: "Install desktop Qt"
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: "mac"
          target: "desktop"
          modules: "qtremoteobjects qt5compat qtshadertools qtmultimedia"
          arch: "clang_64"
          dir: ${{ runner.temp }}
          set-env: "true"
          extra: "--base ${{ env.QT_MIRROR }}"

      - name: "Install iOS Qt"
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: "mac"
          target: "ios"
          modules: "qtremoteobjects qt5compat qtshadertools qtmultimedia"
          dir: ${{ runner.temp }}
          setup-python: "true"
          set-env: "true"
          extra: "--external 7z --base ${{ env.QT_MIRROR }}"

      - name: "Install go"
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.1"
          cache: false

      - name: "Setup gomobile"
        run: |
          export PATH=$PATH:~/go/bin
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init

      - name: Get token from Github App
        uses: actions/create-github-app-token@v1
        id: app_token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PEM }}
          owner: ${{ github.repository_owner }}

      - name: "Get sources"
        uses: actions/checkout@v4
        with:
          submodules: "true"
          fetch-depth: 10
          token: ${{ steps.app_token.outputs.token }}

      - name: "Setup ccache"
        uses: hendrikmuhs/ccache-action@v1.2

      - name: "Install dependencies"
        run: pip install jsonschema jinja2

      - name: "Build project"
        run: |
          git submodule update --init --recursive
          export QT_BIN_DIR="${{ runner.temp }}/Qt/${{ env.QT_VERSION }}/ios/bin"
          export QT_MACOS_ROOT_DIR="${{ runner.temp }}/Qt/${{ env.QT_VERSION }}/macos"
          export PATH=$PATH:~/go/bin
          sh deploy/build_ios.sh
        env:
          IOS_SIGNING_CERT_BASE64: ${{ secrets.IOS_SIGNING_CERT_BASE64 }}
          IOS_SIGNING_CERT_PASSWORD: ${{ secrets.IOS_SIGNING_CERT_PASSWORD }}
          IOS_APP_PROVISIONING_PROFILE: ${{ secrets.IOS_APP_PROVISIONING_PROFILE }}
          IOS_NE_PROVISIONING_PROFILE: ${{ secrets.IOS_NE_PROVISIONING_PROFILE }}

      - name: "Extract api key"
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p private_keys
          echo ${{ secrets.APPSTORE_API_KEY_BASE64 }} | base64 --decode > private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_NAME }}.p8

      - name: "Verfy app"
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          xcrun altool --validate-app -f ipa-ios/ZloVPN.ipa -t ios --apiIssuer ${{ secrets.APPSTORE_API_KEY_ISSUER }} --apiKey ${{ secrets.APPSTORE_API_KEY_NAME }}

      - name: "Upload to AppStore"
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          xcrun altool --upload-app -f ipa-ios/ZloVPN.ipa -t ios --apiIssuer ${{ secrets.APPSTORE_API_KEY_ISSUER }} --apiKey ${{ secrets.APPSTORE_API_KEY_NAME }}

      - name: "Upload appstore .ipa and dSYMs to artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: app-store ipa & dsyms
          path: |
            ${{ github.workspace }}/ipa-ios/ZloVPN.ipa
            ${{ github.workspace }}/*.dSYM.zip
          retention-days: 7

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ github.workspace }}/ipa-ios/ZloVPN.ipa
          fail_on_unmatched_files: true

  # ------------------------------------------------------

  Build-MacOS:
    runs-on: macos-latest

    env:
      QT_VERSION: 6.5.3

    steps:
      - name: "Setup xcode"
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16"

      - name: "Install Qt"
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: "mac"
          target: "desktop"
          arch: "clang_64"
          modules: "qtremoteobjects qt5compat qtshadertools"
          dir: ${{ runner.temp }}
          setup-python: "true"
          set-env: "true"
          extra: "--external 7z --base ${{ env.QT_MIRROR }}"

      - name: "Install create-dmg"
        run: |
          brew install create-dmg

      - name: "Setup AWS CLI"
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
          sudo installer -pkg AWSCLIV2.pkg -target /

      - name: Get token from Github App
        uses: actions/create-github-app-token@v1
        id: app_token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PEM }}
          owner: ${{ github.repository_owner }}

      - name: "Get sources"
        uses: actions/checkout@v4
        with:
          submodules: "true"
          fetch-depth: 10
          token: ${{ steps.app_token.outputs.token }}

      - name: "Setup ccache"
        uses: hendrikmuhs/ccache-action@v1.2

      - name: "Extract api key"
        run: |
          mkdir -p private_keys
          echo ${{ secrets.APPSTORE_API_KEY_BASE64 }} | base64 --decode > private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_NAME }}.p8

      - name: "Build project"
        run: |
          export QT_BIN_DIR="${{ runner.temp }}/Qt/${{ env.QT_VERSION }}/macos/bin"
          bash deploy/build_macos.sh
        env:
          MACOS_SIGNING_CERT_BASE64: ${{ secrets.MACOS_SIGNING_CERT_BASE64 }}
          MACOS_SIGNING_CERT_PASSWORD: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD }}
          APPSTORE_API_KEY_NAME: ${{ secrets.APPSTORE_API_KEY_NAME }}
          APPSTORE_API_KEY_ISSUER: ${{ secrets.APPSTORE_API_KEY_ISSUER }}
          CODESIGN_ID: ${{ vars.CODESIGN_ID }}

      - name: "Download sparkle"
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          wget -O Sparkle.tar.xz https://github.com/sparkle-project/Sparkle/releases/download/2.6.4/Sparkle-2.6.4.tar.xz
          mkdir -p sparkle
          tar -xzvf Sparkle.tar.xz -C sparkle

      - name: "Upload installer artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ZloVPN_macOS_Installer
          path: ZloVPN.dmg
          retention-days: 7

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ZloVPN.dmg
          fail_on_unmatched_files: true

      - name: "Sync r2 releases"
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p r2-release/macos
          aws s3 cp s3://${{ vars.UPDATES_BUCKET }}/macos/appcast.xml r2-release/macos/appcast.xml || true
          export PROJECT_VERSION=$(cat project-version)
          mkdir -p r2-release/macos
          mv ZloVPN.dmg r2-release/macos/ZloVPN_${PROJECT_VERSION}.dmg
          echo "${{ secrets.SPARKLE_SIGNING_KEY }}" | ./sparkle/bin/generate_appcast --ed-key-file - --download-url-prefix ${{ vars.UPDATES_BUCKET_URL }} r2-release/macos
          aws s3 sync r2-release s3://${{ vars.UPDATES_BUCKET }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: auto
          AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}

  # ------------------------------------------------------

  # Build-Android:
  #   runs-on: ubuntu-latest

  #   env:
  #     ANDROID_BUILD_PLATFORM: android-34
  #     QT_VERSION: 6.7.2
  #     QT_MODULES: "qtremoteobjects qt5compat qtimageformats qtshadertools"

  #   steps:
  #     - name: "Install desktop Qt"
  #       uses: jurplel/install-qt-action@v4
  #       with:
  #         version: ${{ env.QT_VERSION }}
  #         host: "linux"
  #         target: "desktop"
  #         arch: "linux_gcc_64"
  #         modules: ${{ env.QT_MODULES }}
  #         dir: ${{ runner.temp }}
  #         extra: "--external 7z --base ${{ env.QT_MIRROR }}"

  #     - name: "Install android_x86_64 Qt"
  #       uses: jurplel/install-qt-action@v4
  #       with:
  #         version: ${{ env.QT_VERSION }}
  #         host: "linux"
  #         target: "android"
  #         arch: "android_x86_64"
  #         modules: ${{ env.QT_MODULES }}
  #         dir: ${{ runner.temp }}
  #         extra: "--external 7z --base ${{ env.QT_MIRROR }}"

  #     - name: "Install android_x86 Qt"
  #       uses: jurplel/install-qt-action@v4
  #       with:
  #         version: ${{ env.QT_VERSION }}
  #         host: "linux"
  #         target: "android"
  #         arch: "android_x86"
  #         modules: ${{ env.QT_MODULES }}
  #         dir: ${{ runner.temp }}
  #         extra: "--external 7z --base ${{ env.QT_MIRROR }}"

  #     - name: "Install android_armv7 Qt"
  #       uses: jurplel/install-qt-action@v4
  #       with:
  #         version: ${{ env.QT_VERSION }}
  #         host: "linux"
  #         target: "android"
  #         arch: "android_armv7"
  #         modules: ${{ env.QT_MODULES }}
  #         dir: ${{ runner.temp }}
  #         extra: "--external 7z --base ${{ env.QT_MIRROR }}"

  #     - name: "Install android_arm64_v8a Qt"
  #       uses: jurplel/install-qt-action@v4
  #       with:
  #         version: ${{ env.QT_VERSION }}
  #         host: "linux"
  #         target: "android"
  #         arch: "android_arm64_v8a"
  #         modules: ${{ env.QT_MODULES }}
  #         dir: ${{ runner.temp }}
  #         extra: "--external 7z --base ${{ env.QT_MIRROR }}"

  #     - name: "Grant execute permission for qt-cmake"
  #       shell: bash
  #       run: |
  #         chmod +x ${{ runner.temp }}/Qt/${{ env.QT_VERSION }}/android_x86_64/bin/qt-cmake

  #     - name: "Get sources"
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: "true"

  #     - name: "Setup ccache"
  #       uses: hendrikmuhs/ccache-action@v1.2

  #     - name: "Setup Java"
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: "temurin"
  #         java-version: "17"
  #         cache: "gradle"

  #     - name: "Setup Android NDK"
  #       id: setup-ndk
  #       uses: nttld/setup-ndk@v1
  #       with:
  #         ndk-version: "r26b"

  #     - name: "Decode keystore secret to file"
  #       env:
  #         KEYSTORE_BASE64: ${{ secrets.ANDROID_RELEASE_KEYSTORE_BASE64 }}
  #       shell: bash
  #       run: |
  #         echo $KEYSTORE_BASE64 | base64 --decode > android.keystore

  #     - name: "Build project"
  #       env:
  #         ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
  #         QT_HOST_PATH: ${{ runner.temp }}/Qt/${{ env.QT_VERSION }}/gcc_64
  #         ANDROID_KEYSTORE_PATH: ${{ github.workspace }}/android.keystore
  #         ANDROID_KEYSTORE_KEY_ALIAS: ${{ secrets.ANDROID_RELEASE_KEYSTORE_KEY_ALIAS }}
  #         ANDROID_KEYSTORE_KEY_PASS: ${{ secrets.ANDROID_RELEASE_KEYSTORE_KEY_PASS }}
  #       shell: bash
  #       run: ./deploy/build_android.sh --aab --apk all --build-platform ${{ env.ANDROID_BUILD_PLATFORM }}

  #     - name: "Upload x86_64 apk"
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: AmneziaVPN-android-x86_64
  #         path: deploy/build/AmneziaVPN-x86_64-release.apk
  #         compression-level: 0
  #         retention-days: 7

  #     - name: "Upload x86 apk"
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: AmneziaVPN-android-x86
  #         path: deploy/build/AmneziaVPN-x86-release.apk
  #         compression-level: 0
  #         retention-days: 7

  #     - name: "Upload arm64-v8a apk"
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: AmneziaVPN-android-arm64-v8a
  #         path: deploy/build/AmneziaVPN-arm64-v8a-release.apk
  #         compression-level: 0
  #         retention-days: 7

  #     - name: "Upload armeabi-v7a apk"
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: AmneziaVPN-android-armeabi-v7a
  #         path: deploy/build/AmneziaVPN-armeabi-v7a-release.apk
  #         compression-level: 0
  #         retention-days: 7

  #     - name: "Upload aab"
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: AmneziaVPN-android
  #         path: deploy/build/AmneziaVPN-release.aab
  #         compression-level: 0
  #         retention-days: 7

  Finalize-Release:
    runs-on: ubuntu-latest
    needs: [Build-Windows, Build-iOS, Build-MacOS]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Add release notes
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          make_latest: "true"
